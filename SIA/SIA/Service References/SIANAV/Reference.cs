//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SIA.SIANAV {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="urn:microsoft-dynamics-schemas/page/fglabel", ConfigurationName="SIANAV.FGLabel_Port")]
    public interface FGLabel_Port {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:microsoft-dynamics-schemas/page/fglabel:Read", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginRead(SIA.SIANAV.Read request, System.AsyncCallback callback, object asyncState);
        
        SIA.SIANAV.Read_Result EndRead(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:microsoft-dynamics-schemas/page/fglabel:ReadByRecId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginReadByRecId(SIA.SIANAV.ReadByRecId request, System.AsyncCallback callback, object asyncState);
        
        SIA.SIANAV.ReadByRecId_Result EndReadByRecId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:microsoft-dynamics-schemas/page/fglabel:ReadMultiple", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginReadMultiple(SIA.SIANAV.ReadMultiple request, System.AsyncCallback callback, object asyncState);
        
        SIA.SIANAV.ReadMultiple_Result EndReadMultiple(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:microsoft-dynamics-schemas/page/fglabel:IsUpdated", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginIsUpdated(SIA.SIANAV.IsUpdated request, System.AsyncCallback callback, object asyncState);
        
        SIA.SIANAV.IsUpdated_Result EndIsUpdated(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:microsoft-dynamics-schemas/page/fglabel:GetRecIdFromKey", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginGetRecIdFromKey(SIA.SIANAV.GetRecIdFromKey request, System.AsyncCallback callback, object asyncState);
        
        SIA.SIANAV.GetRecIdFromKey_Result EndGetRecIdFromKey(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:microsoft-dynamics-schemas/page/fglabel:Create", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginCreate(SIA.SIANAV.Create request, System.AsyncCallback callback, object asyncState);
        
        SIA.SIANAV.Create_Result EndCreate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:microsoft-dynamics-schemas/page/fglabel:CreateMultiple", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginCreateMultiple(SIA.SIANAV.CreateMultiple request, System.AsyncCallback callback, object asyncState);
        
        SIA.SIANAV.CreateMultiple_Result EndCreateMultiple(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:microsoft-dynamics-schemas/page/fglabel:Update", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginUpdate(SIA.SIANAV.Update request, System.AsyncCallback callback, object asyncState);
        
        SIA.SIANAV.Update_Result EndUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:microsoft-dynamics-schemas/page/fglabel:UpdateMultiple", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginUpdateMultiple(SIA.SIANAV.UpdateMultiple request, System.AsyncCallback callback, object asyncState);
        
        SIA.SIANAV.UpdateMultiple_Result EndUpdateMultiple(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:microsoft-dynamics-schemas/page/fglabel:Delete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginDelete(SIA.SIANAV.Delete request, System.AsyncCallback callback, object asyncState);
        
        SIA.SIANAV.Delete_Result EndDelete(System.IAsyncResult result);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public partial class FGLabel : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string keyField;
        
        private bool print_Bar_CodeField;
        
        private bool print_Bar_CodeFieldSpecified;
        
        private int entry_NoField;
        
        private bool entry_NoFieldSpecified;
        
        private string lot_NoField;
        
        private int parent_Entry_NoField;
        
        private bool parent_Entry_NoFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
                this.RaisePropertyChanged("Key");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool Print_Bar_Code {
            get {
                return this.print_Bar_CodeField;
            }
            set {
                this.print_Bar_CodeField = value;
                this.RaisePropertyChanged("Print_Bar_Code");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool Print_Bar_CodeSpecified {
            get {
                return this.print_Bar_CodeFieldSpecified;
            }
            set {
                this.print_Bar_CodeFieldSpecified = value;
                this.RaisePropertyChanged("Print_Bar_CodeSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int Entry_No {
            get {
                return this.entry_NoField;
            }
            set {
                this.entry_NoField = value;
                this.RaisePropertyChanged("Entry_No");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool Entry_NoSpecified {
            get {
                return this.entry_NoFieldSpecified;
            }
            set {
                this.entry_NoFieldSpecified = value;
                this.RaisePropertyChanged("Entry_NoSpecified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Lot_No {
            get {
                return this.lot_NoField;
            }
            set {
                this.lot_NoField = value;
                this.RaisePropertyChanged("Lot_No");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int Parent_Entry_No {
            get {
                return this.parent_Entry_NoField;
            }
            set {
                this.parent_Entry_NoField = value;
                this.RaisePropertyChanged("Parent_Entry_No");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool Parent_Entry_NoSpecified {
            get {
                return this.parent_Entry_NoFieldSpecified;
            }
            set {
                this.parent_Entry_NoFieldSpecified = value;
                this.RaisePropertyChanged("Parent_Entry_NoSpecified");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public partial class FGLabel_Filter : object, System.ComponentModel.INotifyPropertyChanged {
        
        private FGLabel_Fields fieldField;
        
        private string criteriaField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public FGLabel_Fields Field {
            get {
                return this.fieldField;
            }
            set {
                this.fieldField = value;
                this.RaisePropertyChanged("Field");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Criteria {
            get {
                return this.criteriaField;
            }
            set {
                this.criteriaField = value;
                this.RaisePropertyChanged("Criteria");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public enum FGLabel_Fields {
        
        /// <remarks/>
        Print_Bar_Code,
        
        /// <remarks/>
        Entry_No,
        
        /// <remarks/>
        Lot_No,
        
        /// <remarks/>
        Parent_Entry_No,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Read", WrapperNamespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public partial class Read {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/page/fglabel", Order=0)]
        public int Entry_No;
        
        public Read() {
        }
        
        public Read(int Entry_No) {
            this.Entry_No = Entry_No;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Read_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public partial class Read_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/page/fglabel", Order=0)]
        public SIA.SIANAV.FGLabel FGLabel;
        
        public Read_Result() {
        }
        
        public Read_Result(SIA.SIANAV.FGLabel FGLabel) {
            this.FGLabel = FGLabel;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ReadByRecId", WrapperNamespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public partial class ReadByRecId {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/page/fglabel", Order=0)]
        public string recId;
        
        public ReadByRecId() {
        }
        
        public ReadByRecId(string recId) {
            this.recId = recId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ReadByRecId_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public partial class ReadByRecId_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/page/fglabel", Order=0)]
        public SIA.SIANAV.FGLabel FGLabel;
        
        public ReadByRecId_Result() {
        }
        
        public ReadByRecId_Result(SIA.SIANAV.FGLabel FGLabel) {
            this.FGLabel = FGLabel;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ReadMultiple", WrapperNamespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public partial class ReadMultiple {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/page/fglabel", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("filter")]
        public SIA.SIANAV.FGLabel_Filter[] filter;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/page/fglabel", Order=1)]
        public string bookmarkKey;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/page/fglabel", Order=2)]
        public int setSize;
        
        public ReadMultiple() {
        }
        
        public ReadMultiple(SIA.SIANAV.FGLabel_Filter[] filter, string bookmarkKey, int setSize) {
            this.filter = filter;
            this.bookmarkKey = bookmarkKey;
            this.setSize = setSize;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ReadMultiple_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public partial class ReadMultiple_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="ReadMultiple_Result", Namespace="urn:microsoft-dynamics-schemas/page/fglabel", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SIA.SIANAV.FGLabel[] ReadMultiple_Result1;
        
        public ReadMultiple_Result() {
        }
        
        public ReadMultiple_Result(SIA.SIANAV.FGLabel[] ReadMultiple_Result1) {
            this.ReadMultiple_Result1 = ReadMultiple_Result1;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsUpdated", WrapperNamespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public partial class IsUpdated {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/page/fglabel", Order=0)]
        public string Key;
        
        public IsUpdated() {
        }
        
        public IsUpdated(string Key) {
            this.Key = Key;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsUpdated_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public partial class IsUpdated_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="IsUpdated_Result", Namespace="urn:microsoft-dynamics-schemas/page/fglabel", Order=0)]
        public bool IsUpdated_Result1;
        
        public IsUpdated_Result() {
        }
        
        public IsUpdated_Result(bool IsUpdated_Result1) {
            this.IsUpdated_Result1 = IsUpdated_Result1;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRecIdFromKey", WrapperNamespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public partial class GetRecIdFromKey {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/page/fglabel", Order=0)]
        public string Key;
        
        public GetRecIdFromKey() {
        }
        
        public GetRecIdFromKey(string Key) {
            this.Key = Key;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetRecIdFromKey_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public partial class GetRecIdFromKey_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetRecIdFromKey_Result", Namespace="urn:microsoft-dynamics-schemas/page/fglabel", Order=0)]
        public string GetRecIdFromKey_Result1;
        
        public GetRecIdFromKey_Result() {
        }
        
        public GetRecIdFromKey_Result(string GetRecIdFromKey_Result1) {
            this.GetRecIdFromKey_Result1 = GetRecIdFromKey_Result1;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Create", WrapperNamespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public partial class Create {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/page/fglabel", Order=0)]
        public SIA.SIANAV.FGLabel FGLabel;
        
        public Create() {
        }
        
        public Create(SIA.SIANAV.FGLabel FGLabel) {
            this.FGLabel = FGLabel;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Create_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public partial class Create_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/page/fglabel", Order=0)]
        public SIA.SIANAV.FGLabel FGLabel;
        
        public Create_Result() {
        }
        
        public Create_Result(SIA.SIANAV.FGLabel FGLabel) {
            this.FGLabel = FGLabel;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateMultiple", WrapperNamespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public partial class CreateMultiple {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/page/fglabel", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SIA.SIANAV.FGLabel[] FGLabel_List;
        
        public CreateMultiple() {
        }
        
        public CreateMultiple(SIA.SIANAV.FGLabel[] FGLabel_List) {
            this.FGLabel_List = FGLabel_List;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CreateMultiple_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public partial class CreateMultiple_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/page/fglabel", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SIA.SIANAV.FGLabel[] FGLabel_List;
        
        public CreateMultiple_Result() {
        }
        
        public CreateMultiple_Result(SIA.SIANAV.FGLabel[] FGLabel_List) {
            this.FGLabel_List = FGLabel_List;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Update", WrapperNamespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public partial class Update {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/page/fglabel", Order=0)]
        public SIA.SIANAV.FGLabel FGLabel;
        
        public Update() {
        }
        
        public Update(SIA.SIANAV.FGLabel FGLabel) {
            this.FGLabel = FGLabel;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Update_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public partial class Update_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/page/fglabel", Order=0)]
        public SIA.SIANAV.FGLabel FGLabel;
        
        public Update_Result() {
        }
        
        public Update_Result(SIA.SIANAV.FGLabel FGLabel) {
            this.FGLabel = FGLabel;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateMultiple", WrapperNamespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public partial class UpdateMultiple {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/page/fglabel", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SIA.SIANAV.FGLabel[] FGLabel_List;
        
        public UpdateMultiple() {
        }
        
        public UpdateMultiple(SIA.SIANAV.FGLabel[] FGLabel_List) {
            this.FGLabel_List = FGLabel_List;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpdateMultiple_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public partial class UpdateMultiple_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/page/fglabel", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SIA.SIANAV.FGLabel[] FGLabel_List;
        
        public UpdateMultiple_Result() {
        }
        
        public UpdateMultiple_Result(SIA.SIANAV.FGLabel[] FGLabel_List) {
            this.FGLabel_List = FGLabel_List;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Delete", WrapperNamespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public partial class Delete {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:microsoft-dynamics-schemas/page/fglabel", Order=0)]
        public string Key;
        
        public Delete() {
        }
        
        public Delete(string Key) {
            this.Key = Key;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Delete_Result", WrapperNamespace="urn:microsoft-dynamics-schemas/page/fglabel")]
    public partial class Delete_Result {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="Delete_Result", Namespace="urn:microsoft-dynamics-schemas/page/fglabel", Order=0)]
        public bool Delete_Result1;
        
        public Delete_Result() {
        }
        
        public Delete_Result(bool Delete_Result1) {
            this.Delete_Result1 = Delete_Result1;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface FGLabel_PortChannel : SIA.SIANAV.FGLabel_Port, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SIA.SIANAV.Read_Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SIA.SIANAV.Read_Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReadByRecIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReadByRecIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SIA.SIANAV.ReadByRecId_Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SIA.SIANAV.ReadByRecId_Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReadMultipleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReadMultipleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SIA.SIANAV.ReadMultiple_Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SIA.SIANAV.ReadMultiple_Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsUpdatedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsUpdatedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SIA.SIANAV.IsUpdated_Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SIA.SIANAV.IsUpdated_Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRecIdFromKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRecIdFromKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SIA.SIANAV.GetRecIdFromKey_Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SIA.SIANAV.GetRecIdFromKey_Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SIA.SIANAV.Create_Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SIA.SIANAV.Create_Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateMultipleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateMultipleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SIA.SIANAV.CreateMultiple_Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SIA.SIANAV.CreateMultiple_Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SIA.SIANAV.Update_Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SIA.SIANAV.Update_Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateMultipleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateMultipleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SIA.SIANAV.UpdateMultiple_Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SIA.SIANAV.UpdateMultiple_Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SIA.SIANAV.Delete_Result Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SIA.SIANAV.Delete_Result)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FGLabel_PortClient : System.ServiceModel.ClientBase<SIA.SIANAV.FGLabel_Port>, SIA.SIANAV.FGLabel_Port {
        
        private BeginOperationDelegate onBeginReadDelegate;
        
        private EndOperationDelegate onEndReadDelegate;
        
        private System.Threading.SendOrPostCallback onReadCompletedDelegate;
        
        private BeginOperationDelegate onBeginReadByRecIdDelegate;
        
        private EndOperationDelegate onEndReadByRecIdDelegate;
        
        private System.Threading.SendOrPostCallback onReadByRecIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginReadMultipleDelegate;
        
        private EndOperationDelegate onEndReadMultipleDelegate;
        
        private System.Threading.SendOrPostCallback onReadMultipleCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsUpdatedDelegate;
        
        private EndOperationDelegate onEndIsUpdatedDelegate;
        
        private System.Threading.SendOrPostCallback onIsUpdatedCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRecIdFromKeyDelegate;
        
        private EndOperationDelegate onEndGetRecIdFromKeyDelegate;
        
        private System.Threading.SendOrPostCallback onGetRecIdFromKeyCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateDelegate;
        
        private EndOperationDelegate onEndCreateDelegate;
        
        private System.Threading.SendOrPostCallback onCreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateMultipleDelegate;
        
        private EndOperationDelegate onEndCreateMultipleDelegate;
        
        private System.Threading.SendOrPostCallback onCreateMultipleCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateDelegate;
        
        private EndOperationDelegate onEndUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateMultipleDelegate;
        
        private EndOperationDelegate onEndUpdateMultipleDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateMultipleCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteDelegate;
        
        private EndOperationDelegate onEndDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public FGLabel_PortClient() : 
                base(FGLabel_PortClient.GetDefaultBinding(), FGLabel_PortClient.GetDefaultEndpointAddress()) {
        }
        
        public FGLabel_PortClient(EndpointConfiguration endpointConfiguration) : 
                base(FGLabel_PortClient.GetBindingForEndpoint(endpointConfiguration), FGLabel_PortClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public FGLabel_PortClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(FGLabel_PortClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public FGLabel_PortClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(FGLabel_PortClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public FGLabel_PortClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<ReadCompletedEventArgs> ReadCompleted;
        
        public event System.EventHandler<ReadByRecIdCompletedEventArgs> ReadByRecIdCompleted;
        
        public event System.EventHandler<ReadMultipleCompletedEventArgs> ReadMultipleCompleted;
        
        public event System.EventHandler<IsUpdatedCompletedEventArgs> IsUpdatedCompleted;
        
        public event System.EventHandler<GetRecIdFromKeyCompletedEventArgs> GetRecIdFromKeyCompleted;
        
        public event System.EventHandler<CreateCompletedEventArgs> CreateCompleted;
        
        public event System.EventHandler<CreateMultipleCompletedEventArgs> CreateMultipleCompleted;
        
        public event System.EventHandler<UpdateCompletedEventArgs> UpdateCompleted;
        
        public event System.EventHandler<UpdateMultipleCompletedEventArgs> UpdateMultipleCompleted;
        
        public event System.EventHandler<DeleteCompletedEventArgs> DeleteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIA.SIANAV.FGLabel_Port.BeginRead(SIA.SIANAV.Read request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRead(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SIA.SIANAV.Read_Result SIA.SIANAV.FGLabel_Port.EndRead(System.IAsyncResult result) {
            return base.Channel.EndRead(result);
        }
        
        private System.IAsyncResult OnBeginRead(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SIA.SIANAV.Read request = ((SIA.SIANAV.Read)(inValues[0]));
            return ((SIA.SIANAV.FGLabel_Port)(this)).BeginRead(request, callback, asyncState);
        }
        
        private object[] OnEndRead(System.IAsyncResult result) {
            SIA.SIANAV.Read_Result retVal = ((SIA.SIANAV.FGLabel_Port)(this)).EndRead(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReadCompleted(object state) {
            if ((this.ReadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReadCompleted(this, new ReadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReadAsync(SIA.SIANAV.Read request) {
            this.ReadAsync(request, null);
        }
        
        public void ReadAsync(SIA.SIANAV.Read request, object userState) {
            if ((this.onBeginReadDelegate == null)) {
                this.onBeginReadDelegate = new BeginOperationDelegate(this.OnBeginRead);
            }
            if ((this.onEndReadDelegate == null)) {
                this.onEndReadDelegate = new EndOperationDelegate(this.OnEndRead);
            }
            if ((this.onReadCompletedDelegate == null)) {
                this.onReadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReadCompleted);
            }
            base.InvokeAsync(this.onBeginReadDelegate, new object[] {
                        request}, this.onEndReadDelegate, this.onReadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIA.SIANAV.FGLabel_Port.BeginReadByRecId(SIA.SIANAV.ReadByRecId request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReadByRecId(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SIA.SIANAV.ReadByRecId_Result SIA.SIANAV.FGLabel_Port.EndReadByRecId(System.IAsyncResult result) {
            return base.Channel.EndReadByRecId(result);
        }
        
        private System.IAsyncResult OnBeginReadByRecId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SIA.SIANAV.ReadByRecId request = ((SIA.SIANAV.ReadByRecId)(inValues[0]));
            return ((SIA.SIANAV.FGLabel_Port)(this)).BeginReadByRecId(request, callback, asyncState);
        }
        
        private object[] OnEndReadByRecId(System.IAsyncResult result) {
            SIA.SIANAV.ReadByRecId_Result retVal = ((SIA.SIANAV.FGLabel_Port)(this)).EndReadByRecId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReadByRecIdCompleted(object state) {
            if ((this.ReadByRecIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReadByRecIdCompleted(this, new ReadByRecIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReadByRecIdAsync(SIA.SIANAV.ReadByRecId request) {
            this.ReadByRecIdAsync(request, null);
        }
        
        public void ReadByRecIdAsync(SIA.SIANAV.ReadByRecId request, object userState) {
            if ((this.onBeginReadByRecIdDelegate == null)) {
                this.onBeginReadByRecIdDelegate = new BeginOperationDelegate(this.OnBeginReadByRecId);
            }
            if ((this.onEndReadByRecIdDelegate == null)) {
                this.onEndReadByRecIdDelegate = new EndOperationDelegate(this.OnEndReadByRecId);
            }
            if ((this.onReadByRecIdCompletedDelegate == null)) {
                this.onReadByRecIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReadByRecIdCompleted);
            }
            base.InvokeAsync(this.onBeginReadByRecIdDelegate, new object[] {
                        request}, this.onEndReadByRecIdDelegate, this.onReadByRecIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIA.SIANAV.FGLabel_Port.BeginReadMultiple(SIA.SIANAV.ReadMultiple request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReadMultiple(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SIA.SIANAV.ReadMultiple_Result SIA.SIANAV.FGLabel_Port.EndReadMultiple(System.IAsyncResult result) {
            return base.Channel.EndReadMultiple(result);
        }
        
        private System.IAsyncResult OnBeginReadMultiple(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SIA.SIANAV.ReadMultiple request = ((SIA.SIANAV.ReadMultiple)(inValues[0]));
            return ((SIA.SIANAV.FGLabel_Port)(this)).BeginReadMultiple(request, callback, asyncState);
        }
        
        private object[] OnEndReadMultiple(System.IAsyncResult result) {
            SIA.SIANAV.ReadMultiple_Result retVal = ((SIA.SIANAV.FGLabel_Port)(this)).EndReadMultiple(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReadMultipleCompleted(object state) {
            if ((this.ReadMultipleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReadMultipleCompleted(this, new ReadMultipleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReadMultipleAsync(SIA.SIANAV.ReadMultiple request) {
            this.ReadMultipleAsync(request, null);
        }
        
        public void ReadMultipleAsync(SIA.SIANAV.ReadMultiple request, object userState) {
            if ((this.onBeginReadMultipleDelegate == null)) {
                this.onBeginReadMultipleDelegate = new BeginOperationDelegate(this.OnBeginReadMultiple);
            }
            if ((this.onEndReadMultipleDelegate == null)) {
                this.onEndReadMultipleDelegate = new EndOperationDelegate(this.OnEndReadMultiple);
            }
            if ((this.onReadMultipleCompletedDelegate == null)) {
                this.onReadMultipleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReadMultipleCompleted);
            }
            base.InvokeAsync(this.onBeginReadMultipleDelegate, new object[] {
                        request}, this.onEndReadMultipleDelegate, this.onReadMultipleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIA.SIANAV.FGLabel_Port.BeginIsUpdated(SIA.SIANAV.IsUpdated request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsUpdated(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SIA.SIANAV.IsUpdated_Result SIA.SIANAV.FGLabel_Port.EndIsUpdated(System.IAsyncResult result) {
            return base.Channel.EndIsUpdated(result);
        }
        
        private System.IAsyncResult OnBeginIsUpdated(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SIA.SIANAV.IsUpdated request = ((SIA.SIANAV.IsUpdated)(inValues[0]));
            return ((SIA.SIANAV.FGLabel_Port)(this)).BeginIsUpdated(request, callback, asyncState);
        }
        
        private object[] OnEndIsUpdated(System.IAsyncResult result) {
            SIA.SIANAV.IsUpdated_Result retVal = ((SIA.SIANAV.FGLabel_Port)(this)).EndIsUpdated(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsUpdatedCompleted(object state) {
            if ((this.IsUpdatedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsUpdatedCompleted(this, new IsUpdatedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsUpdatedAsync(SIA.SIANAV.IsUpdated request) {
            this.IsUpdatedAsync(request, null);
        }
        
        public void IsUpdatedAsync(SIA.SIANAV.IsUpdated request, object userState) {
            if ((this.onBeginIsUpdatedDelegate == null)) {
                this.onBeginIsUpdatedDelegate = new BeginOperationDelegate(this.OnBeginIsUpdated);
            }
            if ((this.onEndIsUpdatedDelegate == null)) {
                this.onEndIsUpdatedDelegate = new EndOperationDelegate(this.OnEndIsUpdated);
            }
            if ((this.onIsUpdatedCompletedDelegate == null)) {
                this.onIsUpdatedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsUpdatedCompleted);
            }
            base.InvokeAsync(this.onBeginIsUpdatedDelegate, new object[] {
                        request}, this.onEndIsUpdatedDelegate, this.onIsUpdatedCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIA.SIANAV.FGLabel_Port.BeginGetRecIdFromKey(SIA.SIANAV.GetRecIdFromKey request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRecIdFromKey(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SIA.SIANAV.GetRecIdFromKey_Result SIA.SIANAV.FGLabel_Port.EndGetRecIdFromKey(System.IAsyncResult result) {
            return base.Channel.EndGetRecIdFromKey(result);
        }
        
        private System.IAsyncResult OnBeginGetRecIdFromKey(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SIA.SIANAV.GetRecIdFromKey request = ((SIA.SIANAV.GetRecIdFromKey)(inValues[0]));
            return ((SIA.SIANAV.FGLabel_Port)(this)).BeginGetRecIdFromKey(request, callback, asyncState);
        }
        
        private object[] OnEndGetRecIdFromKey(System.IAsyncResult result) {
            SIA.SIANAV.GetRecIdFromKey_Result retVal = ((SIA.SIANAV.FGLabel_Port)(this)).EndGetRecIdFromKey(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRecIdFromKeyCompleted(object state) {
            if ((this.GetRecIdFromKeyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRecIdFromKeyCompleted(this, new GetRecIdFromKeyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRecIdFromKeyAsync(SIA.SIANAV.GetRecIdFromKey request) {
            this.GetRecIdFromKeyAsync(request, null);
        }
        
        public void GetRecIdFromKeyAsync(SIA.SIANAV.GetRecIdFromKey request, object userState) {
            if ((this.onBeginGetRecIdFromKeyDelegate == null)) {
                this.onBeginGetRecIdFromKeyDelegate = new BeginOperationDelegate(this.OnBeginGetRecIdFromKey);
            }
            if ((this.onEndGetRecIdFromKeyDelegate == null)) {
                this.onEndGetRecIdFromKeyDelegate = new EndOperationDelegate(this.OnEndGetRecIdFromKey);
            }
            if ((this.onGetRecIdFromKeyCompletedDelegate == null)) {
                this.onGetRecIdFromKeyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRecIdFromKeyCompleted);
            }
            base.InvokeAsync(this.onBeginGetRecIdFromKeyDelegate, new object[] {
                        request}, this.onEndGetRecIdFromKeyDelegate, this.onGetRecIdFromKeyCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIA.SIANAV.FGLabel_Port.BeginCreate(SIA.SIANAV.Create request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreate(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SIA.SIANAV.Create_Result SIA.SIANAV.FGLabel_Port.EndCreate(System.IAsyncResult result) {
            return base.Channel.EndCreate(result);
        }
        
        private System.IAsyncResult OnBeginCreate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SIA.SIANAV.Create request = ((SIA.SIANAV.Create)(inValues[0]));
            return ((SIA.SIANAV.FGLabel_Port)(this)).BeginCreate(request, callback, asyncState);
        }
        
        private object[] OnEndCreate(System.IAsyncResult result) {
            SIA.SIANAV.Create_Result retVal = ((SIA.SIANAV.FGLabel_Port)(this)).EndCreate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateCompleted(object state) {
            if ((this.CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateCompleted(this, new CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateAsync(SIA.SIANAV.Create request) {
            this.CreateAsync(request, null);
        }
        
        public void CreateAsync(SIA.SIANAV.Create request, object userState) {
            if ((this.onBeginCreateDelegate == null)) {
                this.onBeginCreateDelegate = new BeginOperationDelegate(this.OnBeginCreate);
            }
            if ((this.onEndCreateDelegate == null)) {
                this.onEndCreateDelegate = new EndOperationDelegate(this.OnEndCreate);
            }
            if ((this.onCreateCompletedDelegate == null)) {
                this.onCreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateCompleted);
            }
            base.InvokeAsync(this.onBeginCreateDelegate, new object[] {
                        request}, this.onEndCreateDelegate, this.onCreateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIA.SIANAV.FGLabel_Port.BeginCreateMultiple(SIA.SIANAV.CreateMultiple request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateMultiple(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SIA.SIANAV.CreateMultiple_Result SIA.SIANAV.FGLabel_Port.EndCreateMultiple(System.IAsyncResult result) {
            return base.Channel.EndCreateMultiple(result);
        }
        
        private System.IAsyncResult OnBeginCreateMultiple(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SIA.SIANAV.CreateMultiple request = ((SIA.SIANAV.CreateMultiple)(inValues[0]));
            return ((SIA.SIANAV.FGLabel_Port)(this)).BeginCreateMultiple(request, callback, asyncState);
        }
        
        private object[] OnEndCreateMultiple(System.IAsyncResult result) {
            SIA.SIANAV.CreateMultiple_Result retVal = ((SIA.SIANAV.FGLabel_Port)(this)).EndCreateMultiple(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateMultipleCompleted(object state) {
            if ((this.CreateMultipleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateMultipleCompleted(this, new CreateMultipleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateMultipleAsync(SIA.SIANAV.CreateMultiple request) {
            this.CreateMultipleAsync(request, null);
        }
        
        public void CreateMultipleAsync(SIA.SIANAV.CreateMultiple request, object userState) {
            if ((this.onBeginCreateMultipleDelegate == null)) {
                this.onBeginCreateMultipleDelegate = new BeginOperationDelegate(this.OnBeginCreateMultiple);
            }
            if ((this.onEndCreateMultipleDelegate == null)) {
                this.onEndCreateMultipleDelegate = new EndOperationDelegate(this.OnEndCreateMultiple);
            }
            if ((this.onCreateMultipleCompletedDelegate == null)) {
                this.onCreateMultipleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateMultipleCompleted);
            }
            base.InvokeAsync(this.onBeginCreateMultipleDelegate, new object[] {
                        request}, this.onEndCreateMultipleDelegate, this.onCreateMultipleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIA.SIANAV.FGLabel_Port.BeginUpdate(SIA.SIANAV.Update request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdate(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SIA.SIANAV.Update_Result SIA.SIANAV.FGLabel_Port.EndUpdate(System.IAsyncResult result) {
            return base.Channel.EndUpdate(result);
        }
        
        private System.IAsyncResult OnBeginUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SIA.SIANAV.Update request = ((SIA.SIANAV.Update)(inValues[0]));
            return ((SIA.SIANAV.FGLabel_Port)(this)).BeginUpdate(request, callback, asyncState);
        }
        
        private object[] OnEndUpdate(System.IAsyncResult result) {
            SIA.SIANAV.Update_Result retVal = ((SIA.SIANAV.FGLabel_Port)(this)).EndUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateCompleted(object state) {
            if ((this.UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCompleted(this, new UpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateAsync(SIA.SIANAV.Update request) {
            this.UpdateAsync(request, null);
        }
        
        public void UpdateAsync(SIA.SIANAV.Update request, object userState) {
            if ((this.onBeginUpdateDelegate == null)) {
                this.onBeginUpdateDelegate = new BeginOperationDelegate(this.OnBeginUpdate);
            }
            if ((this.onEndUpdateDelegate == null)) {
                this.onEndUpdateDelegate = new EndOperationDelegate(this.OnEndUpdate);
            }
            if ((this.onUpdateCompletedDelegate == null)) {
                this.onUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateDelegate, new object[] {
                        request}, this.onEndUpdateDelegate, this.onUpdateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIA.SIANAV.FGLabel_Port.BeginUpdateMultiple(SIA.SIANAV.UpdateMultiple request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateMultiple(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SIA.SIANAV.UpdateMultiple_Result SIA.SIANAV.FGLabel_Port.EndUpdateMultiple(System.IAsyncResult result) {
            return base.Channel.EndUpdateMultiple(result);
        }
        
        private System.IAsyncResult OnBeginUpdateMultiple(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SIA.SIANAV.UpdateMultiple request = ((SIA.SIANAV.UpdateMultiple)(inValues[0]));
            return ((SIA.SIANAV.FGLabel_Port)(this)).BeginUpdateMultiple(request, callback, asyncState);
        }
        
        private object[] OnEndUpdateMultiple(System.IAsyncResult result) {
            SIA.SIANAV.UpdateMultiple_Result retVal = ((SIA.SIANAV.FGLabel_Port)(this)).EndUpdateMultiple(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateMultipleCompleted(object state) {
            if ((this.UpdateMultipleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateMultipleCompleted(this, new UpdateMultipleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateMultipleAsync(SIA.SIANAV.UpdateMultiple request) {
            this.UpdateMultipleAsync(request, null);
        }
        
        public void UpdateMultipleAsync(SIA.SIANAV.UpdateMultiple request, object userState) {
            if ((this.onBeginUpdateMultipleDelegate == null)) {
                this.onBeginUpdateMultipleDelegate = new BeginOperationDelegate(this.OnBeginUpdateMultiple);
            }
            if ((this.onEndUpdateMultipleDelegate == null)) {
                this.onEndUpdateMultipleDelegate = new EndOperationDelegate(this.OnEndUpdateMultiple);
            }
            if ((this.onUpdateMultipleCompletedDelegate == null)) {
                this.onUpdateMultipleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateMultipleCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateMultipleDelegate, new object[] {
                        request}, this.onEndUpdateMultipleDelegate, this.onUpdateMultipleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SIA.SIANAV.FGLabel_Port.BeginDelete(SIA.SIANAV.Delete request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDelete(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SIA.SIANAV.Delete_Result SIA.SIANAV.FGLabel_Port.EndDelete(System.IAsyncResult result) {
            return base.Channel.EndDelete(result);
        }
        
        private System.IAsyncResult OnBeginDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SIA.SIANAV.Delete request = ((SIA.SIANAV.Delete)(inValues[0]));
            return ((SIA.SIANAV.FGLabel_Port)(this)).BeginDelete(request, callback, asyncState);
        }
        
        private object[] OnEndDelete(System.IAsyncResult result) {
            SIA.SIANAV.Delete_Result retVal = ((SIA.SIANAV.FGLabel_Port)(this)).EndDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteCompleted(object state) {
            if ((this.DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteCompleted(this, new DeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteAsync(SIA.SIANAV.Delete request) {
            this.DeleteAsync(request, null);
        }
        
        public void DeleteAsync(SIA.SIANAV.Delete request, object userState) {
            if ((this.onBeginDeleteDelegate == null)) {
                this.onBeginDeleteDelegate = new BeginOperationDelegate(this.OnBeginDelete);
            }
            if ((this.onEndDeleteDelegate == null)) {
                this.onEndDeleteDelegate = new EndOperationDelegate(this.OnEndDelete);
            }
            if ((this.onDeleteCompletedDelegate == null)) {
                this.onDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteDelegate, new object[] {
                        request}, this.onEndDeleteDelegate, this.onDeleteCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SIA.SIANAV.FGLabel_Port CreateChannel() {
            return new FGLabel_PortClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.FGLabel_Port)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.FGLabel_Port)) {
                return new System.ServiceModel.EndpointAddress("http://misserver11:7047/DynamicsNAV/WS/ReplaceWithAPercentEncodedCompanyName/Page" +
                        "/FGLabel");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return FGLabel_PortClient.GetBindingForEndpoint(EndpointConfiguration.FGLabel_Port);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return FGLabel_PortClient.GetEndpointAddress(EndpointConfiguration.FGLabel_Port);
        }
        
        private class FGLabel_PortClientChannel : ChannelBase<SIA.SIANAV.FGLabel_Port>, SIA.SIANAV.FGLabel_Port {
            
            public FGLabel_PortClientChannel(System.ServiceModel.ClientBase<SIA.SIANAV.FGLabel_Port> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginRead(SIA.SIANAV.Read request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("Read", _args, callback, asyncState);
                return _result;
            }
            
            public SIA.SIANAV.Read_Result EndRead(System.IAsyncResult result) {
                object[] _args = new object[0];
                SIA.SIANAV.Read_Result _result = ((SIA.SIANAV.Read_Result)(base.EndInvoke("Read", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginReadByRecId(SIA.SIANAV.ReadByRecId request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("ReadByRecId", _args, callback, asyncState);
                return _result;
            }
            
            public SIA.SIANAV.ReadByRecId_Result EndReadByRecId(System.IAsyncResult result) {
                object[] _args = new object[0];
                SIA.SIANAV.ReadByRecId_Result _result = ((SIA.SIANAV.ReadByRecId_Result)(base.EndInvoke("ReadByRecId", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginReadMultiple(SIA.SIANAV.ReadMultiple request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("ReadMultiple", _args, callback, asyncState);
                return _result;
            }
            
            public SIA.SIANAV.ReadMultiple_Result EndReadMultiple(System.IAsyncResult result) {
                object[] _args = new object[0];
                SIA.SIANAV.ReadMultiple_Result _result = ((SIA.SIANAV.ReadMultiple_Result)(base.EndInvoke("ReadMultiple", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsUpdated(SIA.SIANAV.IsUpdated request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("IsUpdated", _args, callback, asyncState);
                return _result;
            }
            
            public SIA.SIANAV.IsUpdated_Result EndIsUpdated(System.IAsyncResult result) {
                object[] _args = new object[0];
                SIA.SIANAV.IsUpdated_Result _result = ((SIA.SIANAV.IsUpdated_Result)(base.EndInvoke("IsUpdated", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRecIdFromKey(SIA.SIANAV.GetRecIdFromKey request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetRecIdFromKey", _args, callback, asyncState);
                return _result;
            }
            
            public SIA.SIANAV.GetRecIdFromKey_Result EndGetRecIdFromKey(System.IAsyncResult result) {
                object[] _args = new object[0];
                SIA.SIANAV.GetRecIdFromKey_Result _result = ((SIA.SIANAV.GetRecIdFromKey_Result)(base.EndInvoke("GetRecIdFromKey", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreate(SIA.SIANAV.Create request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("Create", _args, callback, asyncState);
                return _result;
            }
            
            public SIA.SIANAV.Create_Result EndCreate(System.IAsyncResult result) {
                object[] _args = new object[0];
                SIA.SIANAV.Create_Result _result = ((SIA.SIANAV.Create_Result)(base.EndInvoke("Create", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateMultiple(SIA.SIANAV.CreateMultiple request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("CreateMultiple", _args, callback, asyncState);
                return _result;
            }
            
            public SIA.SIANAV.CreateMultiple_Result EndCreateMultiple(System.IAsyncResult result) {
                object[] _args = new object[0];
                SIA.SIANAV.CreateMultiple_Result _result = ((SIA.SIANAV.CreateMultiple_Result)(base.EndInvoke("CreateMultiple", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdate(SIA.SIANAV.Update request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("Update", _args, callback, asyncState);
                return _result;
            }
            
            public SIA.SIANAV.Update_Result EndUpdate(System.IAsyncResult result) {
                object[] _args = new object[0];
                SIA.SIANAV.Update_Result _result = ((SIA.SIANAV.Update_Result)(base.EndInvoke("Update", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateMultiple(SIA.SIANAV.UpdateMultiple request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("UpdateMultiple", _args, callback, asyncState);
                return _result;
            }
            
            public SIA.SIANAV.UpdateMultiple_Result EndUpdateMultiple(System.IAsyncResult result) {
                object[] _args = new object[0];
                SIA.SIANAV.UpdateMultiple_Result _result = ((SIA.SIANAV.UpdateMultiple_Result)(base.EndInvoke("UpdateMultiple", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDelete(SIA.SIANAV.Delete request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("Delete", _args, callback, asyncState);
                return _result;
            }
            
            public SIA.SIANAV.Delete_Result EndDelete(System.IAsyncResult result) {
                object[] _args = new object[0];
                SIA.SIANAV.Delete_Result _result = ((SIA.SIANAV.Delete_Result)(base.EndInvoke("Delete", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            FGLabel_Port,
        }
    }
}
